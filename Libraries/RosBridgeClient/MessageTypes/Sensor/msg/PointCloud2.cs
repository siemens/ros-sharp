/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

using Newtonsoft.Json;

using RosSharp.RosBridgeClient.MessageTypes.Std;

namespace RosSharp.RosBridgeClient.MessageTypes.Sensor
{
    public class PointCloud2 : Message
    {
        [JsonIgnore]
        public const string RosMessageName = "sensor_msgs/PointCloud2";

        //  This message holds a collection of N-dimensional points, which may
        //  contain additional information such as normals, intensity, etc. The
        //  point data is stored as a binary blob, its layout described by the
        //  contents of the "fields" array.
        //  The point cloud data may be organized 2d (image-like) or 1d
        //  (unordered). Point clouds organized as 2d images may be produced by
        //  camera depth sensors such as stereo or time-of-flight.
        //  Time of sensor data acquisition, and the coordinate frame ID (for 3d
        //  points).
        public Header header;
        //  2D structure of the point cloud. If the cloud is unordered, height is
        //  1 and width is the length of the point cloud.
        public uint height;
        public uint width;
        //  Describes the channels and their layout in the binary data blob.
        public PointField[] fields;
        public bool is_bigendian;
        //  Is this data bigendian?
        public uint point_step;
        //  Length of a point in bytes
        public uint row_step;
        //  Length of a row in bytes
        public byte[] data;
        //  Actual point data, size is (row_step*height)
        public bool is_dense;
        //  True if there are no invalid points

        public PointCloud2()
        {
            this.header = new Header();
            this.height = 0;
            this.width = 0;
            this.fields = new PointField[0];
            this.is_bigendian = false;
            this.point_step = 0;
            this.row_step = 0;
            this.data = new byte[0];
            this.is_dense = false;
        }

        public PointCloud2(Header header, uint height, uint width, PointField[] fields, bool is_bigendian, uint point_step, uint row_step, byte[] data, bool is_dense)
        {
            this.header = header;
            this.height = height;
            this.width = width;
            this.fields = fields;
            this.is_bigendian = is_bigendian;
            this.point_step = point_step;
            this.row_step = row_step;
            this.data = data;
            this.is_dense = is_dense;
        }
    }
}
