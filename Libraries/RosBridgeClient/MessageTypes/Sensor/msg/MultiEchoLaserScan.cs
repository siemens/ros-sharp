/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

using Newtonsoft.Json;

using RosSharp.RosBridgeClient.MessageTypes.Std;

namespace RosSharp.RosBridgeClient.MessageTypes.Sensor
{
    public class MultiEchoLaserScan : Message
    {
        [JsonIgnore]
        public const string RosMessageName = "sensor_msgs/MultiEchoLaserScan";

        //  Single scan from a multi-echo planar laser range-finder
        // 
        //  If you have another ranging device with different behavior (e.g. a sonar
        //  array), please find or create a different message, since applications
        //  will make fairly laser-specific assumptions about this data
        public Header header;
        //  timestamp in the header is the acquisition time of 
        //  the first ray in the scan.
        // 
        //  in frame frame_id, angles are measured around 
        //  the positive Z axis (counterclockwise, if Z is up)
        //  with zero angle being forward along the x axis
        public float angle_min;
        //  start angle of the scan [rad]
        public float angle_max;
        //  end angle of the scan [rad]
        public float angle_increment;
        //  angular distance between measurements [rad]
        public float time_increment;
        //  time between measurements [seconds] - if your scanner
        //  is moving, this will be used in interpolating position
        //  of 3d points
        public float scan_time;
        //  time between scans [seconds]
        public float range_min;
        //  minimum range value [m]
        public float range_max;
        //  maximum range value [m]
        public LaserEcho[] ranges;
        //  range data [m] (Note: NaNs, values < range_min or > range_max should be discarded)
        //  +Inf measurements are out of range
        //  -Inf measurements are too close to determine exact distance.
        public LaserEcho[] intensities;
        //  intensity data [device-specific units].  If your
        //  device does not provide intensities, please leave
        //  the array empty.

        public MultiEchoLaserScan()
        {
            this.header = new Header();
            this.angle_min = 0.0f;
            this.angle_max = 0.0f;
            this.angle_increment = 0.0f;
            this.time_increment = 0.0f;
            this.scan_time = 0.0f;
            this.range_min = 0.0f;
            this.range_max = 0.0f;
            this.ranges = new LaserEcho[0];
            this.intensities = new LaserEcho[0];
        }

        public MultiEchoLaserScan(Header header, float angle_min, float angle_max, float angle_increment, float time_increment, float scan_time, float range_min, float range_max, LaserEcho[] ranges, LaserEcho[] intensities)
        {
            this.header = header;
            this.angle_min = angle_min;
            this.angle_max = angle_max;
            this.angle_increment = angle_increment;
            this.time_increment = time_increment;
            this.scan_time = scan_time;
            this.range_min = range_min;
            this.range_max = range_max;
            this.ranges = ranges;
            this.intensities = intensities;
        }
    }
}
